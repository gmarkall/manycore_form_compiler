"""This module generates the code that extracts the relevant fields from
Fluidity state, transfers it to the GPU, and the run_model_ function that
executes the model for one timestep, by calling the kernels generated by
cudaform.py, and the necessary solves."""

# MCFC libs
from assembler import *
from codegeneration import *

class CudaAssemblerBackend(AssemblerBackend):

    def buildStateType(self):
	return Pointer(Class('StateHolder'))

    def buildState(self):
	t = self.buildStateType()
	state = Variable('state', t)
	decl = Declaration(state)
	return decl

    def buildInitialiser(self, AST):

	func = FunctionDefinition(Void(), 'initialise_gpu_')
	func.setExternC(True)

	# Call the state constructor
	state = Variable('state')
	newState = New(Class('StateHolder'))
	construct = AssignmentOp(state, newState)
	func.append(construct)
	
	# Call the state initialiser
	call = FunctionCall('initialise')
	arrow = ArrowOp(state, call)
	func.append(arrow)

	# Extract accessed fields
	accessedFields = findAccessedFields(AST)
	for field in accessedFields:
	    fieldString = '"' + field + '"'
	    params = ExpressionList([Literal(fieldString)])
	    call = FunctionCall('extractField',params)
	    arrow = ArrowOp(state, call)
	    func.append(arrow)

	# Allocate memory and transfer to GPU
	call = FunctionCall('allocateAllGPUMemory')
	arrow = ArrowOp(state, call)
	func.append(arrow)

	call = FunctionCall('transferAllFields')
	arrow = ArrowOp(state, call)
	func.append(arrow)
	
	# Insert temporary fields into state
	solveResultFields = findSolveResults(AST)
	for field in solveResultFields:
	    fieldString = '"' + field + '"'
	    params = ExpressionList([Literal(fieldString)])
	    call = FunctionCall('insertTemporaryField',params)
	    arrow = ArrowOp(state, call)
	    func.append(arrow)

	########################
	#### Get num_ele, num_nodes etc
	##########################

	##########################
	## do mallocs
	##########################

	return func


# T = state.scalar_fields["Tracer",c]
T = state.scalar_fields[('Tracer', c)]
# 
# v=TestFunction(T)
v = Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), -2) & source(T)
# u=TrialFunction(T)
u = Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), -1) & source(T)
# f=Coefficient(T)
f = Coefficient(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0) & source(T)
# 
# lmbda = 1
lmbda = 1
# A = (dot(grad(v),grad(u))-lmbda*v*u)*dx
A = Form([Integral(Sum(IndexSum(Product(Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0), MultiIndex((Index(0),), {Index(0): 2})), MultiIndex((Index(0),), {Index(0): 2})), MultiIndex((Index(1),), {Index(1): 2})), Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 1), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(1),), {Index(1): 2}))), MultiIndex((Index(1),), {Index(1): 2})), Product(IntValue(-1, (), (), {}), Product(Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0), Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 1)))), Measure('cell', 0, None))])
# 
# RHS = v*f*dx
RHS = Form([Integral(Product(Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0)), Measure('cell', 0, None))])
# 
# state.scalar_fields["Tracer",c] = solve(A, RHS)
state.scalar_fields[('Tracer', c)] = solve(A, RHS)

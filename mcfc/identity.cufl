# T = state.scalar_fields["Tracer",c]
T = state.scalar_fields[('Tracer', c)]
# 
# v=TestFunction(T)
v = Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), -2) & source(T)
# u=TrialFunction(T)
u = Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), -1) & source(T)
# f=Coefficient(T)
f = Coefficient(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0) & source(T)
# 
# A = v*u*dx
A = Form([Integral(Product(Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0), Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 1)), Measure('cell', 0, None))])
# RHS = v*f*dx
RHS = Form([Integral(Product(Argument(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 1), 0)), Measure('cell', 0, None))])
# 
# p=solve(A, RHS)
p = solve(A, RHS)
# state.scalar_fields["Tracer",c]=p
state.scalar_fields[('Tracer', c)] = p
